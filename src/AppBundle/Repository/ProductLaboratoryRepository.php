<?php

namespace AppBundle\Repository;

/**
 * ProductLaboratoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductLaboratoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Adiciona filtros para selecionar apenas eventos Ã  query.
     * @param QueryBuilder $qb Query inicial.
     * @return QueryBuilder Query com filtros.
     */
    public function addActiveQuery(QueryBuilder $qb = null) {
        $em = $this->getEntityManager();

        if (is_null($qb)) {
            $qb = $em->createQueryBuilder();
        }

        $qb->select(array('productlaboratory'))
            ->from('AppBundle:ProductLaboratory', 'productlaboratory');

        return $qb;
    }

    /**
     * Ordena produtos em ordem alfabetica
     * @return array Array de productlaboratory.
     */
    public function findAllOrderProduct() {
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");
        $qb->orderBy("product.name");
        return $qb->getQuery()->getResult();
    }

    /**
     * Ordena produtos em ordem alfabetica
     * @return array Array de productlaboratory.
     */
    public function findAllActiveOrderProduct() {
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");
        $qb->andWhere("product.active = :active")
            ->setParameter("active", true);
        $qb->orderBy("product.name");
        return $qb->getQuery()->getResult();
    }

    public function findAllByLaboratory($id){
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");
        $qb->where("productlaboratory.laboratory = :laboratory")
            ->setParameter("laboratory", $id);       

        $qb->orderBy('product.name');
        
        return $qb->getQuery()->getResult();   
    }

    public function findAllActiveByLaboratory($id){
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");
        $qb->where("productlaboratory.laboratory = :laboratory")
            ->setParameter("laboratory", $id);       

        $qb->andWhere("product.active = :active")
            ->setParameter("active", true);

        $qb->orderBy('product.name');
        
        return $qb->getQuery()->getResult();   
    }

    public function findByLaboratoryAndProductName($laboratory, $product){
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");
        $qb->where("productlaboratory.laboratory = :laboratory")
            ->setParameter("laboratory", $laboratory);  

        $qb->andWhere($qb->expr()->like($qb->expr()->upper('product.name'), ':product'))
           ->setParameter(':product', "%" . strtoupper($product) . "%");

        $qb->andWhere("product.active = :active")
            ->setParameter("active", true);

        $qb->orderBy('product.name');
        
        return $qb->getQuery()->getResult();   
    }

    public function findByProductName($product){
        $qb = $this->addActiveQuery();
        $qb->join("productlaboratory.product", "product");

        $qb->andWhere($qb->expr()->like($qb->expr()->upper('product.name'), ':product'))
           ->setParameter(':product', "%" . strtoupper($product) . "%");

        $qb->andWhere("product.active = :active")
            ->setParameter("active", true);

        $qb->orderBy('product.name');
        
        return $qb->getQuery()->getResult();   
    }

}